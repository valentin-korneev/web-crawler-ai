import asyncio
from typing import Dict, Any
from app.services.queue_service import queue_service
from app.services.scanner_service import scanner_service
from app.core.database import init_db
from app.core.logging import logger


async def process_scan_task(task_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        contractor_id = task_data['contractor_id']
        url = task_data['url']
        depth = task_data.get('depth', 0)
        session_id = task_data.get('session_id')
        
        await logger.info(f"üöÄ Starting scan task: contractor {contractor_id}, URL: {url}, depth: {depth}, session_id: {session_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await scanner_service.scan_contractor(contractor_id, url, session_id)
        
        await logger.info(f"‚úÖ Completed scan task for contractor {contractor_id}, URL: {url}")
        
    except Exception as e:
        await logger.error(f"‚ùå Error processing scan task for contractor {task_data.get('contractor_id', 'unknown')}: {e}")
        await logger.exception("Full traceback:")

async def start_scan_worker():
    """–ó–∞–ø—É—Å–∫ worker'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await logger.info("üîß Starting scan worker...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await logger.info("üìä Initializing database connection...")
        await init_db()
        await logger.info("‚úÖ Database initialized for scan worker")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
        await logger.info("üê∞ Connecting to MQ...")
        await queue_service.connect()
        await logger.info("‚úÖ Connected to MQ")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
        await logger.info("üì• Starting to consume scan tasks from queue...")
        await queue_service.consume_scan_tasks(process_scan_task)
        
        await logger.info("üîÑ Scan worker is running and waiting for tasks...")
        
        # –î–µ—Ä–∂–∏–º worker –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        await logger.info("üõë Scan worker stopped by user")
    except Exception as e:
        await logger.error(f"üí• Scan worker error: {e}")
        await logger.exception("Full traceback:")
    finally:
        await logger.info("üîå Disconnecting from MQ...")
        await queue_service.disconnect()
        await logger.info("üëã Scan worker shutdown complete")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ scan worker"""
    await logger.info("üéØ Scan worker process started")
    await start_scan_worker()


# –ó–∞–ø—É—Å–∫–∞–µ–º worker –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    asyncio.run(main())
